import { Component, OnInit, Input, OnDestroy, Output, EventEmitter } from '@angular/core';
import { FormBuilder, FormGroup } from '@angular/forms';
import { Subscription } from 'rxjs';
import { StaticCustomValidators } from '../../sharedModule/validators/static-custom.validators';
import { UserService } from '../../sharedModule/services/user.service';
import { User } from '../../sharedModule/models/user.model';
import { ChangeEvent } from '../../sharedModule/models/change-event.model';
import { ModalService } from '../../sharedModule/services/modal.service';

@Component({
    selector: '[app-user-manage-row]',
    templateUrl: './user-manage-row.component.html',
    styleUrls: ['./user-manage-row.component.css']
})
export class UserManageRowComponent implements OnInit, OnDestroy {
    @Input() user: User;
    @Output('update') event = new EventEmitter<ChangeEvent<User>>();
    avatarEditForm: FormGroup;
    showEditAvatar: boolean = false;
    deleteSub: Subscription;
    editSub: Subscription;

    constructor(
        private fb: FormBuilder,
        private userService: UserService,
        private modalService: ModalService
    ) { }

    ngOnInit(): void {
        this.createAvatarEditForm();
    }

    createAvatarEditForm(): void {
        this.avatarEditForm = this.fb.group({
            avatar: ['', [
                StaticCustomValidators.customPattern(/[A-Za-z0-9]+\.jpg$|\.jpeg$|\.png$/, 'memtype')]]
        })
        this.f.avatar.setValue(this.user.avatar);
    }

    ngOnDestroy(): void {
        if (this.deleteSub) {
            this.deleteSub.unsubscribe();
        }
        if (this.editSub) {
            this.editSub.unsubscribe();
        }
    }

    onEditClick():void {
        this.showEditAvatar = !this.showEditAvatar;
    }

    onSubmit(): void {
        if (this.editSub) {
            this.editSub.unsubscribe();
        }

        if (this.avatarEditForm.valid) {
            this.editSub = this.userService.editUser(this.user._id, this.avatarEditForm.value)
                .subscribe(editedUser => this.event.emit({reason: 'edit', data: editedUser}));
            this.showEditAvatar = false;
        }
    }

    destroyClickHandler(): void {
        const title = 'Warning';
        const message = 'This will permanently remove the user and all data generated by them. Do you wish to proceed?';
        this.modalService.createConfirmModal(title, message, this.destroyUser);
    }

    destroyUser = (): void => {
        this.deleteSub = this.userService
            .deleteUser(this.user)
            .subscribe((deletedUser) => this.event.emit({reason: 'delete', data: deletedUser}));
    }

    get f() { return this.avatarEditForm.controls; }
}
